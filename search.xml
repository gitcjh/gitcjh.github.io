<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[apue chapter4 文件和目录]]></title>
      <url>http://yoursite.com/2016/09/03/apue-chapter4-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="Exercise4-2"><a href="#Exercise4-2" class="headerlink" title="Exercise4.2"></a>Exercise4.2</h1><p>表4-1指出SVR4没有提供宏S_ISLNK，但是SVR4支持符号连接并且在<sys stat.h="">中定义了SIFLNK，如何修改ourhdr.h使得需要SISLNK宏的程序可以使用它？<br><strong>Ans</strong><br>将下面的几行语句加入<ourhdr.h><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#if defined (S_IFLNK)  &amp;&amp;  !defined(S_ISLNK )  </div><div class="line">	#define  S_ISLNK(mode)    (((mode) &amp; S_IFMT ) == S_IFLNK)</div><div class="line">#endif</div></pre></td></tr></table></figure></ourhdr.h></sys></p>
<p>这是一个我们编写的头文件如何屏蔽某些系统差别的实例。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apue chapter3 Files IO]]></title>
      <url>http://yoursite.com/2016/08/29/apue-chapter3-Files-IO/</url>
      <content type="html"><![CDATA[<p>《Advanced Programming in the UNIX Environment》第三章——文件IO课后习题答案</p>
<a id="more"></a>
<h2 id="Exercise3-2"><a href="#Exercise3-2" class="headerlink" title="Exercise3.2"></a>Exercise3.2</h2><p>编写一个同3.12节中的dup2功能相同的函数，要求不调用fcntl函数并且要有正确的出错处理。<br><strong>思路：递归调用dup</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ourhdr.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup_2</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//dup_2(1,10);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* if success</span></div><div class="line"> *      return the filedes</div><div class="line"> * else</div><div class="line"> *      return -1</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup_2</span><span class="params">(<span class="keyword">int</span> filedes, <span class="keyword">int</span> filedes2)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (filedes2 &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (filedes == filedes2) <span class="keyword">return</span> filedes2;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (close(filedes2) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> newfd;</div><div class="line">    <span class="keyword">if</span> ((newfd = dup(filedes)) == filedes2) <span class="keyword">return</span> filedes;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        dup_2(filedes, filedes2);</div><div class="line">        close(newfd);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> filedes2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="Exercise3-3"><a href="#Exercise3-3" class="headerlink" title="Exercise3.3"></a>Exercise3.3</h2><p>假设一个进程执行下面的3个函数调用：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fd1 = open(pathname, oflags);</div><div class="line">fd2 = dup(fd1);</div><div class="line">fd3 = open(pathname, oflags);</div></pre></td></tr></table></figure></p>
<p>画出结果图（见图3-3）。对fcntl作用于fd1来说，F_SETFD命令会影响哪一个文件描述符？FSETFL呢？<br><strong>Ans</strong><br>每次调用open函数就分配一个文件表项，如果两次打开的是相同的文件，则两个文件表项指向相同的v节点。调用dup引用已存在的文件表项（此处指fd1的文件表项），见图C-1。当F_SETFD作用于fd1时，只影响fd1的文件描述符标志；F_SETFL作用于fd1时，则影响fd1及fd2的文件描述符标志。<br><img src="http://i2.buimg.com/567571/a2ef9282a1dda9c5.jpg" alt="图C-1"></p>
<blockquote>
<p><strong>F_SETFL</strong> 将文件状态标志设置为第三个参数的值。(取为整型值)<br><strong>F_SETFD</strong> 对于filedes 设置文件描述符标志。</p>
</blockquote>
<hr>
<h2 id="Exercise3-4"><a href="#Exercise3-4" class="headerlink" title="Exercise3.4"></a>Exercise3.4</h2><p>在许多程序中都包含下面一段代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dup2(fd, <span class="number">0</span>);  </div><div class="line">dup2(fd, <span class="number">1</span>);  </div><div class="line">dup2(fd, <span class="number">2</span>);  </div><div class="line"><span class="keyword">if</span> (fd &gt; <span class="number">2</span>)  </div><div class="line">    close(fd);</div></pre></td></tr></table></figure></p>
<p>为了说明if语句的必要性，假设fd是1，画出每次调用dup2时3个描述符项及相应的文件表项的变化情况。然后再画出fd为3的情况。<br><strong>Ans</strong><br>如果fd是1，执行dup2(fd，1)后返回1，但是没有关闭描述符1（见3 .12节）。调用3次dup2后，3个描述符指向相同的文件表项，所以不需要关闭描述符。如果fd是3，调用3次dup2后，有4个描述符指向相同的文件表项，所以需要关闭描述符3。<br>事实上，0、1、2分别表示标准输入，标准输出，标准错误输出，一般是不关闭的。而当<code>fd &gt; 2</code>时，表示其余的文件描述符，一般而言需要关闭。</p>
<hr>
<h2 id="Exercise3-5"><a href="#Exercise3-5" class="headerlink" title="Exercise3.5"></a>Exercise3.5</h2><p>在Bourne shell和KornShell中，digit1&gt;&amp;digit2表示要将描述符digit1重定向至描述符digit2的同一文件。请说明下面两条命令的区别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.out &gt; outfile 2&gt;&amp;1</div><div class="line">a.out 2&gt;&amp;1 &gt; outfile</div></pre></td></tr></table></figure></p>
<p>（提示：shell从左到右处理命令行。）<br><strong>Ans</strong><br>shell从左到右处理命令行,所以<br><code>a.out &gt; outfile 2&gt;&amp;1</code><br>首先设置标准输出到outfile，然后执行dups将标准输出复制到描述符2（标准错误）上，其结果是将标准输出和标准错误设置为相同的文件，即描述符1和2指向相同的文件表项。而对于命令行<br><code>a.out 2 &gt;&amp;1 &gt;outfile</code><br>由于首先执行dups，所以描述符2成为终端（假设命令是交互执行的），标准输出重定向到outfile。结果是描述符1指向outfile的文件表项，描述符2指向终端的文件表项。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows1 0 删除内置app]]></title>
      <url>http://yoursite.com/2016/08/06/Windows-10-%E5%88%A0%E9%99%A4%E5%86%85%E7%BD%AEapp/</url>
      <content type="html"><![CDATA[<p>Windows10自带了一大堆乱七八糟的app，而且在控制面板的卸载程序找不到这些= =，其实只要两条命令就可以卸载。</p>
<h2 id="1-使用Windows-PowerShell卸载"><a href="#1-使用Windows-PowerShell卸载" class="headerlink" title="1.使用Windows PowerShell卸载"></a>1.使用Windows PowerShell卸载</h2><ul>
<li><p>命令<strong>Get-AppxPackage -AllUsers</strong>获取app列表<br>先打开PowerShell，在Cortana直接搜就可以，然后右键管理员运行。</p>
<a id="more"></a>
<p><img src="http://i4.piimg.com/567571/226061d39aba3748.png" alt="PowerShell"><br>输入命令<code>Get-AppxPackage -AllUsers</code>，然后就会输出所有app列表，大致上长的和下面一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Name                   : Microsoft.BingWeather</div><div class="line">Publisher              : CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US</div><div class="line">Architecture           : X86</div><div class="line">ResourceId             :</div><div class="line">Version                : 4.7.118.0</div><div class="line">PackageFullName        : Microsoft.BingWeather_4.7.118.0_x86__8wekyb3d8bbwe</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
<li><p>命令<strong>Remove-AppxPackage PackageFullName</strong>卸载程序<br>例如卸载上面说的BingWeather，可以执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Remove-AppxPackage Microsoft.BingWeather_4.7.118.0_x86__8wekyb3d8bbwe</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-删除安装包"><a href="#2-删除安装包" class="headerlink" title="2.删除安装包"></a>2.删除安装包</h2><p>使用PowerShell卸载程序之后，这些内置app的安装包还残留在C盘中，作为一个强迫症患者，不能忍！<br>这些安装包的路径如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Program Files\WindowsApps</div></pre></td></tr></table></figure></p>
<p>选择对应的安装包删除即可。</p>
<p>每博一首歌</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=27759600&auto=0&height=66"></iframe>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 绑定自定义域名]]></title>
      <url>http://yoursite.com/2016/08/03/Hexo-%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>搭建好属于自己的博客并托管到之后GitHub会分配一个二级域名<code>name.github.io</code>，当然也可以绑定自定义的域名。</p>
<a id="more"></a>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=33556489&auto=0&height=66"></iframe></p>
<h1 id="1-申请域名"><a href="#1-申请域名" class="headerlink" title="1.申请域名"></a>1.申请域名</h1><p>国内申请域名可以在万网或者是腾讯云上等购买，域名并不是想象中的那么贵，我买的域名也就5软妹币/年，挺划算的。</p>
<h1 id="2-添加CNAME"><a href="#2-添加CNAME" class="headerlink" title="2.添加CNAME"></a>2.添加CNAME</h1><p>在站点根目录的的source目录下新建一个名为<code>CNAME</code>的文件，里面写上自定义域名，比如我的CNAME是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">junhan.win</div></pre></td></tr></table></figure></p>
<p>之后<code>hexo d</code>提交到github即可。</p>
<h1 id="3-添加域名解析"><a href="#3-添加域名解析" class="headerlink" title="3.添加域名解析"></a>3.添加域名解析</h1><p>万网上可以解析域名，dnspod也可以。既然我的域名是在万网上买的，所以就直接在万网上进行解析。</p>
<h3 id="a-添加两个指向GitHub服务器的A记录，如下图"><a href="#a-添加两个指向GitHub服务器的A记录，如下图" class="headerlink" title="a.添加两个指向GitHub服务器的A记录，如下图"></a>a.添加两个指向GitHub服务器的A记录，如下图</h3><p><img src="http://i2.piimg.com/567571/ceaefa6e7d2a64e8.png" alt="添加A记录"></p>
<h3 id="b-添加指向github二级域名的CNAME记录，如下图"><a href="#b-添加指向github二级域名的CNAME记录，如下图" class="headerlink" title="b.添加指向github二级域名的CNAME记录，如下图"></a>b.添加指向github二级域名的CNAME记录，如下图</h3><p><img src="http://i2.piimg.com/567571/c39a8896b97d2f29.png" alt="添加CNAME记录"></p>
<h1 id="4-使用自定义域名直接访问HEXO博客"><a href="#4-使用自定义域名直接访问HEXO博客" class="headerlink" title="4.使用自定义域名直接访问HEXO博客"></a>4.使用自定义域名直接访问HEXO博客</h1><p><a href="http://junhan.win" target="_blank" rel="external">http://junhan.win</a>: <a href="http://junhan.win" target="_blank" rel="external">Demo</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[闲着没事乱折腾]]></title>
      <url>http://yoursite.com/2016/07/30/%E9%97%B2%E7%9D%80%E6%B2%A1%E4%BA%8B%E4%B9%B1%E6%8A%98%E8%85%BE/</url>
      <content type="html"><![CDATA[<p>本来今晚是要干活的，有点懒散，索性继续瞎搞Hexo博客配置。<br>今天把我的博客主题换成Next了，看来看去还是这个比较简约。之后又胡乱配置了一些东西，例如标签云，背景图片，背景音乐。<br>这里记下Next主题官方教程位置<a href="http://theme-next.iissnan.com/getting-started.html#install-next-theme" target="_blank" rel="external">开始使用</a>  </p>
<a id="more"></a>
<hr>
<h2 id="添加标签云"><a href="#添加标签云" class="headerlink" title="添加标签云"></a>添加标签云</h2><ol>
<li><p>先在Hexo站目录下执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
</li>
<li><p>之后生成<code>/source/tags/tags.md</code>，打开修改为如下格式，即添加type: “tags”：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2016-07-30 21:23:21</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h2><p>打开<code>\themes\next\source\css\_schemes\Pisces\index.sty</code>，可以看到第一句是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body &#123; background: #f5f7f9; &#125;</div></pre></td></tr></table></figure></p>
<p>把他改成如下形式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">body &#123; background:url(/images/background.jpg); &#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>/images/background.jpg</code>是事先放好的背景图片</p>
<h2 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h2><p>这里使用网易云音乐，很简单。<br><img src="http://i1.piimg.com/567571/17fed33033acc95d.png" alt="网易云"><br>如上图，点<code>生成外链播放器</code>，然后直接把HTML代码贴到markdown博文下就可以了，效果如下：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=85621&auto=1&height=66"></iframe>




]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows10+CentOS7双系统(UEFI+GPT)]]></title>
      <url>http://yoursite.com/2016/07/26/Windows10-CentOS7%E5%8F%8C%E7%B3%BB%E7%BB%9F-UEFI-GPT/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>眼馋双系统有一段时间了，然而之前安装失败格盘的惨痛教训历历在目。这几天闲着没事查阅了好多资料，怂了一个星期，终于决定再来一次尝试。总的来说安装过程还是挺顺利的，但是后期Windows引导的问题折腾了三天。。。<br>技术不好，最终搞出个另类的双系统：默认启动Windows10，同时支持Windows Quick Boot；BIOS下切换到CentOS。  </p>
<h1 id="设备信息"><a href="#设备信息" class="headerlink" title="设备信息"></a>设备信息</h1><blockquote>
<p>PC： Thinkpad E431，Microsoft Windows10 Pro 64Bit (10240)<br>CentOS版本：CentOS-7-x86_64-DVD-1511(这个版本的CentOS支持UEFI)<br><a id="more"></a></p>
</blockquote>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h3 id="1-分配CentOS安装盘符"><a href="#1-分配CentOS安装盘符" class="headerlink" title="1. 分配CentOS安装盘符"></a>1. 分配CentOS安装盘符</h3><p>直接使用Windows的磁盘管理，用磁盘压缩切一个空间出来就好了。我是切了50G出来。</p>
<h3 id="2-关闭Windows-Quick"><a href="#2-关闭Windows-Quick" class="headerlink" title="2. 关闭Windows Quick"></a>2. 关闭<code>Windows Quick</code></h3><p>执行<code>Win+R</code>输入<code>gpedit.msc</code>，计算机配置-&gt;管理模块-&gt;关机，双击右边，选择<code>已禁用</code>。  <img src="http://i2.piimg.com/567571/33d722ea2e1be7f3.png" alt="关闭快速启动"></p>
<h3 id="3-关闭Secure-Boot"><a href="#3-关闭Secure-Boot" class="headerlink" title="3. 关闭Secure Boot"></a>3. 关闭<code>Secure Boot</code></h3><p>这个要在BIOS下执行。  </p>
<h1 id="安装CentOS"><a href="#安装CentOS" class="headerlink" title="安装CentOS"></a>安装CentOS</h1><h3 id="1-UltraISO制作CentOS启动盘。"><a href="#1-UltraISO制作CentOS启动盘。" class="headerlink" title="1. UltraISO制作CentOS启动盘。"></a>1. <code>UltraISO</code>制作CentOS启动盘。</h3><h3 id="2-设置CentOS镜像位置"><a href="#2-设置CentOS镜像位置" class="headerlink" title="2. 设置CentOS镜像位置"></a>2. 设置CentOS镜像位置</h3><p>BISO选择U盘启动，接下来应该会看到黑色界面，如下：<br><img src="http://i2.piimg.com/567571/9bf538617d6ee03e.png" alt="安装CentOS7"><br>将光标移到第一行，然后这里不是直接点<code>Install CentOS7</code>，要按Tab键先配置CentOS镜像位置。<br>按下Tab之后可以看到一下三行英文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">setparams &quot;Install CentOS 7&quot; Install</div><div class="line">    limuze /image/vmlinuz inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 quiet  </div><div class="line">    initrdefi /image/pxeboot/initrd.img</div></pre></td></tr></table></figure></p>
<p> 这个是用来选择镜像位置的，因为CentOS它不会自动定位到正确的位置。。。所以接下来要先修改上面的内容。<br>① 把第二句改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">limuze /image/vmlinuz initrd=initrd.img linux dd quiet</div></pre></td></tr></table></figure></p>
<p>② 接下来按<code>Ctrr+x</code>执行，就可以看到所有盘符和编号了。类似于下面这样：<br><img src="http://i1.piimg.com/567571/f7904f40f4b33ecb.png" alt="修改CentOS位置"><br>可以看到，CentOS镜像的位置（也就是我的U盘）是<code>sdb4</code>。记住这个sdb4，然后关掉这个界面重新再来一次。<br>③ 重新来一次又来到了步骤2的那个图，还是按Tab键，这一次将第二行改成如下形式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">limuze /image/vmlinuz inst.stage2=hd:/dev/sdb4 quiet</div></pre></td></tr></table></figure></p>
<p>接下来按<code>Ctrr+x</code>执行，CentOS就开始安装了。记得要勾选一个桌面（如gnome桌面）。  </p>
<h3 id="4-设置CentOS磁盘分区"><a href="#4-设置CentOS磁盘分区" class="headerlink" title="4. 设置CentOS磁盘分区"></a>4. 设置CentOS磁盘分区</h3><p>进来安装界面之后，选择前面切出来的那个盘。<br><img src="http://i4.piimg.com/567571/b4c9a622f50ebe11.png" alt="此处输入图片的描述"><br>CentOS安装过程中要设置磁盘分区，这个就涉及到Linux的磁盘分区。下面是我的设置情况:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/        ：大小30G，设备类型`LAM`，文件系统`ext4`</div><div class="line">/boot    ：大小200M，设备类型`标准分区`，文件系统`ext4`</div><div class="line">/boot/efi：大小128M，设备类型、文件系统默认值（这个efi分区是放CentOS的uefi文件的，貌似最后也就占10M左右的空间）</div><div class="line">/swap    ：大小8G，设备类型`LAM`，文件系统`ext4`（据说swap分区要为物理内存的两倍，不过觉得我8G内存给它8G已经算多了）</div><div class="line">/home：  ：剩下的空间都给它，设备类型`LAM`，文件系统`ext4`</div></pre></td></tr></table></figure></p>
<p>之后就开始漫长的安装了。。。。</p>
<h1 id="修复引导"><a href="#修复引导" class="headerlink" title="修复引导"></a>修复引导</h1><p>CentOS安装完毕时候会重启电脑，这个时候你会看到系统选项有一个<code>Windows10</code>和 <code>CentOS</code>，选择<code>Windows10</code>，“卧槽！我的Win10居然没事，网上那群骗子，害我虚惊一场，重启看看CentOS先”。选择CentOS，然后就看到下面的东东：<br><img src="http://i2.piimg.com/567571/f236c2bc1a183fc5.png" alt="Windows未启动"><br>“特么我这个是Linux啊，你提示Windows未启动是什么意思？”<br>然后就开始了我的折腾之旅。。。。。<br>（这里省略上万字的心酸历程）<br>下面是解决方案</p>
<h3 id="1-网友建议"><a href="#1-网友建议" class="headerlink" title="1. 网友建议"></a>1. 网友建议</h3><p>网上说的在Windows下使用<code>easybcd</code>添加CentOS的引导，反正我试了很多遍就是没成功。事实上<code>easybcd</code>只能添加CentOS的mbr引导，这个可以在<code>easybcd</code>看出，然而我是通过UEFI来装的，应该就不行。</p>
<h3 id="2-几番折腾，新办法"><a href="#2-几番折腾，新办法" class="headerlink" title="2. 几番折腾，新办法"></a>2. 几番折腾，新办法</h3><p>① 前面CentOS分区的时候实际上<code>/boot/efi</code>是一个<code>ESP</code>分区（UEFI 系统分区）。里面放的是CentOS的EFI引导文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ ls -R EFI/</div><div class="line">EFI/:</div><div class="line">BOOT/  centos/</div><div class="line"></div><div class="line">EFI/BOOT:</div><div class="line">BOOTX64.EFI*  fallback.efi*</div><div class="line"></div><div class="line">EFI/centos:</div><div class="line">BOOT.CSV  gcdx64.efi*  grub.cfg.bak  grubx64.efi*     shim.efi*</div><div class="line">fonts/    grub.cfg     grubenv       MokManager.efi*  shim-centos.efi*</div><div class="line"></div><div class="line">EFI/centos/fonts:</div><div class="line">unicode.pf2</div></pre></td></tr></table></figure></p>
<p>其中最重要的文件是<code>grubx64.efi</code>，开机时，BIOS先通过ESP分区找到相应的efi程序，然后加载启动系统，这里的<code>grubx64.efi</code>就是用来加载CentOS的。<br>② 以此类推，Windows下肯定也有类似的文件。的确，在装Windows10的时候，会自动分配一个隐藏的ESP分区，盘符别名为<code>SYSTEM_DRV</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BOOT/</div><div class="line">EFI/</div></pre></td></tr></table></figure></p>
<p>其中<code>EFI/Microsoft/Boot</code>目录里面放的就是加载Windows系统的efi文件。即<code>EFI/Microsoft/Boot/bootmgr.efi</code>。<br>由上可知，整个硬盘共有两个ESP分区，常理上讲好像有点不科学，具体我也不知道可不可以。我觉得可能是不可以的，测试了下，发现BIOS每次都是从<code>SYSTEM_DRV</code>里面搜索efi程序，而CentOS的efi又不在<code>SYSTEM_DRV</code>目录下，这应该就是CentOS无法启动的原因。<br>③ 所以接下来我就把CentOS的ESP分区里面的<code>EFI/centos</code>整个文件夹都拷贝到<code>SYSTEM_DRV</code>盘下的<code>/EFI</code>目录下。重启电脑发现还是不行，原因很简单<br><strong>a</strong>.如果想要出现两个系统的选择项，那就要使用Win10引导CentOS或者有个程序来专门引导两个系统，前者我查了很多资料还是没弄出来，好像是要修改Windows的<code>BCD</code>文件，有点麻烦。至于后者，有个叫<code>rEFind</code>的程序（<a href="https://sourceforge.net/projects/refind/" target="_blank" rel="external">rEFind下载</a>）可以达到目的，不过弄出来界面太丑了，我放弃了。<br><strong>b</strong>.如果想要使用BIOS引导，就要把<code>EFI/centos</code>里面的路径写到一些特殊的文件，这个要用到一个叫<code>BOOTICE</code>的工具<a href="http://www.ipauly.com/wp-content/uploads/2015/11/BOOTICEx64_v1.332.rar" target="_blank" rel="external">BOOTICE下载</a>。  </p>
<h3 id="3-BOOTICE使用教程"><a href="#3-BOOTICE使用教程" class="headerlink" title="3. BOOTICE使用教程"></a>3. <code>BOOTICE</code>使用教程</h3><p>① 打开BOOTICE，选择UEFI，点<code>修改启动序列</code><br><img src="http://i4.piimg.com/567571/ae36600142436d51.png" alt="BOOTICE"><br><img src="http://i4.piimg.com/567571/fb61a15fd564471e.png" alt="修改启动序列"><br>② 选择左边的添加，先随便选一个本地磁盘的efi文件，然后把左边的<code>启动文件</code>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\EFI\centos\grubx64.efi</div></pre></td></tr></table></figure></p>
<p><code>启动分区</code>选择和Windows系统一样的项。<br>最后把它移动到第二个，保存。<br>③ 使用PE把<code>\EFI\centos</code>从CentOS的ESP目录移动到Windows的ESP目录下。这一步是为了让上面设置<code>启动文件:\EFI\centos\grubx64.efi</code>生效。<br>不得不说，PE真是个好工具。</p>
<h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><p>通过上述步骤之后，重启电脑，电脑应该还是自动进入Win10，因为<code>BOOTICE</code>工具是把CentOS添加到BIOS的启动序列中= =<br>重启，进入BIOS（Thinkpad是F12），可以看到BIOS启动列表有<code>Windows10</code>、<code>CentOS</code>、<code>USB HDD</code>等等，这个<code>USB HDD</code>就是U盘，点<code>CentOS</code>，就可以进入CentOS的引导了，然后启动CentOS。到这里就成功了。</p>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>装这个双系统，修复引导花了我好长时间，不过也学到了很多东西，比如UEFI和传统Legacy的区别、UEFI的工作原理、PE的作用等等，最终文件没有发生丢失，也算是值了。下面是总结。</p>
<ol>
<li><strong>UEFI+GPT装双系统真麻烦</strong></li>
<li><strong>微软垄断心态真可怕</strong></li>
<li><strong>Google搜索东西靠谱多了</strong></li>
<li>PE真是个好工具（进入磁盘修改EFI文件）  </li>
<li>我装的双系统怎么和大家的不一样= =<br>(又要继续干活了。。。)</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h4 id="CentOS7安装教程"><a href="#CentOS7安装教程" class="headerlink" title="CentOS7安装教程"></a>CentOS7安装教程</h4><ol>
<li><a href="http://www.augsky.com/599.html" target="_blank" rel="external">U盘安装CentOS7的最终解决方案</a><h4 id="UEFI引导修复"><a href="#UEFI引导修复" class="headerlink" title="UEFI引导修复"></a>UEFI引导修复</h4></li>
<li><a href="http://blog.csdn.net/smstong/article/details/9408451" target="_blank" rel="external">UEFI主板GPT方式安装CentOS6.4</a></li>
<li><a href="http://blog.csdn.net/smstong/article/details/9422809" target="_blank" rel="external">UEFI+GPT安装Windows8和CentOS双系统</a></li>
<li><a href="http://m.blog.csdn.net/article/details?id=51207807" target="_blank" rel="external">Windows10与CentOS的完美结合</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_53918a450102uzi6.html" target="_blank" rel="external">UEFI的两种启动模式</a></li>
<li><a href="http://blog.csdn.net/icycolawater/article/details/51242999" target="_blank" rel="external">支持 efi 的主板 双系统安装 ubuntu - 学习 EFI 和 gpt</a></li>
<li><a href="https://www.zhihu.com/question/22502670" target="_blank" rel="external">如何在UEFI模式下Win8与Ubuntu多系统的安装？</a></li>
<li><a href="http://tshare365.com/archives/1774.html" target="_blank" rel="external">如何在UEFI+GPT下使用rEFind实现Win10 + Kali2.0 双引导！</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux文件与目录管理]]></title>
      <url>http://yoursite.com/2016/07/14/Linux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="一、目录与路径"><a href="#一、目录与路径" class="headerlink" title="一、目录与路径"></a>一、目录与路径</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.           代表此目录</div><div class="line">..          代表上层目录</div><div class="line">-           代表前一个工作目录</div><div class="line">~           代表当前用户的主文件夹</div><div class="line">~accout     代表用户account的主文件夹</div></pre></td></tr></table></figure>
<p>与目录处理相关的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd:     切换目录</div><div class="line">pwd:    显示当前目录</div><div class="line">mkdir:  新建目录</div><div class="line">rmdir:  删除空目录</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ol>
<li><code>cd</code>命令<blockquote>
<p><code>cd [绝对路径 or 相对路径]</code></p>
</blockquote>
</li>
<li><code>pwd</code>命令<blockquote>
<p><code>pwd [-P]</code><br>参数：-P 显示出当前路径，而非使用连接(link)路径  </p>
</blockquote>
</li>
</ol>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[junhan@localhost test_dir]$ cd /var/mail</div><div class="line">[junhan@localhost mail]$ pwd</div><div class="line">/var/mail</div><div class="line">[junhan@localhost mail]$ pwd -P</div><div class="line">/var/spool/mail</div><div class="line">[junhan@localhost mail]$ ls -ld /var/mail</div><div class="line">lrwxrwxrwx. 1 root root 10 7月   7 18:39 /var/mail -&gt; spool/mail</div></pre></td></tr></table></figure></p>
<ol>
<li><code>mkdir</code>命令  <blockquote>
<p><code>mkdir [-mp] 目录名称</code><br>-m: 直接配置权限（默认使用umask）<br>-p: 递归创建  </p>
</blockquote>
</li>
</ol>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[junhan@localhost test_dir]$ mkdir t1/t2/t3/t4</div><div class="line">mkdir: 无法创建目录&quot;t1/t2/t3/t4&quot;: 没有那个文件或目录</div><div class="line">[junhan@localhost test_dir]$ mkdir -p t1/t2/t3/t4</div><div class="line">[junhan@localhost test_dir]$ mkdir -m 711 test2</div><div class="line">[junhan@localhost test_dir]$ ls -ld test2</div><div class="line">drwx--x--x. 2 junhan junhan 6 7月  15 01:52 test2</div></pre></td></tr></table></figure></p>
<ol>
<li><code>rmdir</code>命令<blockquote>
<p><code>rmdir [-p] 目录名称</code><br>-P: 连同上层空目录一起删除</p>
</blockquote>
</li>
</ol>
<h1 id="二、文件目录管理"><a href="#二、文件目录管理" class="headerlink" title="二、文件目录管理"></a>二、文件目录管理</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ls: 查看文件与目录</div><div class="line">cp: 复制</div><div class="line">rm: 删除</div><div class="line">mv: 移动</div><div class="line">basename/dirname: 文件名/目录名</div></pre></td></tr></table></figure>
<ol>
<li><p><code>ls</code>命令</p>
<blockquote>
<p><code>ls [-aAdfFhilnrRSt] 目录名称</code><br><strong>参数：</strong><br>-a : 全部文件，包括.和..（常用来显示所有文件）<br>-A : 全部文件，不包括.和..<br>-d : 只列出目录本身（常用来显示目录本身信息）<br>-F : 给予附加数据结构，如：<code>*：</code>代表可执行文件；<code>/:</code>表示目录；<code>=：</code>表示socket文件；<code>|：</code>表示管道文件.<br>-i : 列出i-node<br>-l : 列出长数据串，包含文件属性和权限等信息（常用于查看权限）<br>-R : 连同子目录一同显示<br><code>ls [--color={never,auto,always}] 目录名称</code><br>–color={never,auto,always} : 设置显示颜色<br><code>ls [--full-time] 目录名称</code><br>–full-time : 显示完整时间<br>–time={atime,ctime} : 显示访问时间(atime)，权限改变时间(ctime)  </p>
</blockquote>
</li>
<li><p><code>cp</code>命令</p>
<blockquote>
<p><code>cp [-adfilprus] source destination</code><br><code>cp option source1 source2 source3 ... directory</code><br><strong>参数</strong><br>-a : 相当于-pdr<br>-d : 如果是连接文件，则复制连接文件（默认复制的是源文件）<br>-f : 即force，强制复制<br>-i : 若已经存在，则询问（常用）<br>-l : 用来硬连接的连接文件创建<br>-P : 连同属性一同复制（默认复制不会复制属性，此命令常用于备份文件）<br>-r : 递归复制（常用于复制整个目录）<br>-s : 复制成符号链接文件(symbolice link)<br>-u : 即update，源文件相对较旧才更新  </p>
</blockquote>
</li>
<li><code>rm</code>命令<blockquote>
<p><code>rm [-fir]</code><br><strong>参数：</strong><br>-f : 即force<br>-i : 询问<br>-r : 递归删除</p>
</blockquote>
</li>
<li><code>mv</code>命令<blockquote>
<p><code>mv [-fiu] source destination</code><br><code>mv [options] source1 source2 ... directory</code><br><strong>参数:</strong><br>-f : force<br>-i : 询问<br>-u : 比较旧才更新  </p>
</blockquote>
</li>
<li><code>basename/dirname</code>命令<br>示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[junhan@localhost junhan]$ dirname test_dir/</div><div class="line">file   t1/    test2/ </div><div class="line">[junhan@localhost junhan]$ dirname test_dir/file </div><div class="line">test_dir</div><div class="line">[junhan@localhost junhan]$ basename test_dir/file </div><div class="line">file</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="三、文件内容查阅"><a href="#三、文件内容查阅" class="headerlink" title="三、文件内容查阅"></a>三、文件内容查阅</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">cat : 第一行开始显示</div><div class="line">tac : 最后一行开始显示</div><div class="line">nl : 显示行号</div><div class="line">more : 一页页显示</div><div class="line">less : 一页页显示，课往前翻页</div><div class="line">head : 看头几行</div><div class="line">tail : 看末几行</div><div class="line">od : 指定进制查看</div></pre></td></tr></table></figure>
<ol>
<li><code>cat</code>命令(concatenate)  <blockquote>
<p><code>cat [-AbEnTv]</code><br>-A : 等价于-vET，显示特殊字符<br>-b : 显示行号，不包括空白行<br>-n : 显示行号，包括空白行  </p>
</blockquote>
</li>
<li><code>nl</code>命令  <blockquote>
<p><code>nl [-bnw] 文件</code><br>-b a : 同cat -n<br>-b t : 同cat -b (默认值)  </p>
</blockquote>
</li>
<li><code>more</code>和<code>less</code>  <blockquote>
<p><strong>more:</strong><br>空格：向下翻页<br>回车：向下一行<br>/seq：向下搜索seq<br>:f：显示文件名和当前行号<br>q ：退出<br><strong>less:</strong><br>[PgDn]：向下翻页<br>[PgUp]：向上翻页<br>/seq：向下查<br>?seq：向上查<br>n ：重复查  </p>
</blockquote>
</li>
<li><code>head</code>和<code>tail 文件</code>  <blockquote>
<p>head/tail [-n number]:number+表示前number行，number-表示除后number行。<br>tail -f 文件:  动态监测  </p>
</blockquote>
</li>
<li><code>od</code>命令<blockquote>
<p><code>od [it Type] 文件</code><br>a         : 默认字符<br>c         : ASCII<br>d[size]   : 十进制，占用size位<br>o[size]   : 八进制<br>x[size]   : 十六进制<br>f[size]   : 浮点数  </p>
</blockquote>
</li>
</ol>
<h1 id="四、修改文件时间或创建新文件"><a href="#四、修改文件时间或创建新文件" class="headerlink" title="四、修改文件时间或创建新文件"></a>四、修改文件时间或创建新文件</h1><ol>
<li>时间<blockquote>
<p><code>mtime</code>   : 文件修改时间(modification time)<br><code>ctime</code>   : 权限或属性修改时间(status time)<br><code>atime</code>   : 被读取时间，如cat,cp(access time)<br>使用<code>ls -l --time={ctime,atime} 文件或目录</code>即可显示，默认显示mtime  </p>
</blockquote>
</li>
<li><code>touch</code>命令  <blockquote>
<p><code>touch [-acdmt]</code><br>-a : 修改atime<br>-c : 修改ctime<br>-m : 修改mtime<br>-d : 修改日期，后接日期<br>-t : 修改日期，后接日期 [YYMMDDhhmm]   </p>
</blockquote>
</li>
</ol>
<h1 id="五、文件权限"><a href="#五、文件权限" class="headerlink" title="五、文件权限"></a>五、文件权限</h1><ol>
<li><code>umask</code>命令  <blockquote>
<p>umask<br>umask -S  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 示例</div><div class="line">[junhan@localhost junhan]$ umask</div><div class="line">0022</div><div class="line">[junhan@localhost junhan]$ umask -S</div><div class="line">u=rwx,g=rx,o=rx</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<p>由umask可知，新建一个目录或者文件的默认权限：<br>文件：<code>-rw-rw-rw- - 022 = -rw-r--r--</code><br>目录：<code>drwxrwxrwx - 022 = drwxr-wr-x</code>  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建腾讯云服务器]]></title>
      <url>http://yoursite.com/2016/07/11/%E6%90%AD%E5%BB%BA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文讲的是搭建腾讯云服务器的经过，由于对这些也不是很懂，所以就一点点来咯，本文会不定时更新。<br><a id="more"></a></p>
<h1 id="腾讯云服务器介绍"><a href="#腾讯云服务器介绍" class="headerlink" title="腾讯云服务器介绍"></a>腾讯云服务器介绍</h1><p>腾讯云服务器对在校大学生有优惠活动，每月可以提供64元的代金券直到毕业，最低配置的云服务器65/月，相当于每月1元就可以拥有一台云服务器，算是挺实惠的，所以就来玩玩看。详情可以戳<a href="http://www.qcloud.com/event/qcloudSchool" target="_blank" rel="external">腾讯 云+校园计划</a><br>按照官方指引，执行下面的四个步骤之后就可以购买云服务器和域名了。</p>
<blockquote>
<p>注册 腾讯云帐号<br>完成 实名认证（财付通认证）<br>完成 学生认证<br>领用代金券</p>
</blockquote>
<p>整个验证过程应该要两天，之后代金券就会到账了。</p>
<h1 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h1><p>//等待更新。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客(二) 自定义博客主题]]></title>
      <url>http://yoursite.com/2016/07/10/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%BA%8C-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>说实话，Hexo默认的landspace主题实在是太low了，于是上网查了下修改主题的教材。没有前端基础，所以搞得乱七八糟的，终于搞定！<br>Hexo主题直接上Github搜就有了，很多。我用的是<code>yilia</code>主题，下面来个预览图。<br><a id="more"></a><br><img src="/image/preview.jpg" alt=""></p>
<hr>
<h1 id="Hexo根目录"><a href="#Hexo根目录" class="headerlink" title="Hexo根目录"></a>Hexo根目录</h1><p>要配置主题，就要了解下Hexo博客根目录下的基本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<p><code>_config.yml</code>:网站的 配置 信息，您可以在此配置大部分的参数。<br><code>package.json</code>:应用程序的信息。<br><code>scaffolds</code>:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。<br><code>source</code>:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。<br><code>themes</code>:主题 文件夹。Hexo会根据主题来生成静态页面。</p>
<hr>
<h1 id="下载主题包"><a href="#下载主题包" class="headerlink" title="下载主题包"></a>下载主题包</h1><p>下载主题有两个方法</p>
<ol>
<li>直接从Github上下载，然后放在<code>E:\HEXO\themes</code>里面(这里的<code>E:\HEXO</code>是上篇讲的本地博客根目录)<br>例如我使用的<code>yilia</code>主题，它的链接：<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">https://github.com/litten/hexo-theme-yilia</a>。点击下载Zip压缩包到本地，然后放在<code>E:\HEXO\themes</code>里面。</li>
<li>直接执行命令下载<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://https://github.com/litten/hexo-theme-yilian.git themes/hexo-theme-yilia</div></pre></td></tr></table></figure>
</li>
</ol>
<p>之后会自动下载<code>yilia</code>，并保存在<code>E:\HEXO\themes\yilia</code>。</p>
<h1 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h1><p>打开<code>E:\HEXO\_config.yml</code>，找到<code>theme</code>字段，将<code>landspace</code>改为<code>yilia</code>。</p>
<h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/yilia</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h1 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h1><p>在<code>themes\yilia</code>目录下有个<code>_config.yml</code>，这是来配置主题用的。<br>具体语法我也不是很懂，不过看起来理解应该不难。主要用到的有下面这些：<br>1.菜单和友链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  所有文章: /archives</div><div class="line">  随笔: /tags/随笔</div></pre></td></tr></table></figure></p>
<p><code>menu</code>是用来创建菜单的，我这里创建了三个菜单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># SubNav</div><div class="line">subnav:</div><div class="line">  github: &quot;https://github.com/ChenJunhan&quot;</div><div class="line">  weibo: &quot;http://weibo.com/2633996855&quot;</div></pre></td></tr></table></figure></p>
<p>这个是来编辑友情链接的。<br>其他的应该也没什么了，我了解的就这么多。<br>2.头像和图标<br><code>_config.yml</code>中，有两个字段用来配置头像和网站图标的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Miscellaneous</div><div class="line">google_analytics: &apos;&apos;</div><div class="line">favicon: /img/favicon.png</div><div class="line"></div><div class="line">#你的头像url</div><div class="line">avatar: /img/avatar.jpg</div></pre></td></tr></table></figure></p>
<p><code>url</code>可以使用外链，也可以使用本地链接，本地链接是<code>E:\HEXO\themes</code>的相对链接。例如头像我放在<code>E:\HEXO\themes\img\avatar.png</code>。<br>3.其他配置<br>其他配置例如css，这些很前端。是的，我一点也不会。因为代码块的显示出了点问题，所以我捣鼓了下<code>E:\HEXO\themes\yilia\source\css\_partial</code>下的<code>highlight.styl</code>，这个是用来配置代码高亮的，其他的看名字应该也可以猜到它的功能。</p>
<hr>
<h1 id="为Hexo博文添加标签"><a href="#为Hexo博文添加标签" class="headerlink" title="为Hexo博文添加标签"></a>为Hexo博文添加标签</h1><p>写博文的时候，在最上面的<code>tags</code>字段声明即可。<br>之后public下会生成一个<code>tags</code>文件夹，和一个<code>tags.html</code>文件，这个不用理它。<br>单个tag<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: xxx</div><div class="line">date: xxx</div><div class="line">tags: tag</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>多个tags<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: xxx</div><div class="line">date: xxx</div><div class="line">tags: </div><div class="line">	- tag1</div><div class="line">	- tag2</div><div class="line">---</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客(一) 使用Hexo搭建博客并托管到Github]]></title>
      <url>http://yoursite.com/2016/07/10/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-%E4%B8%80-%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E6%89%98%E7%AE%A1%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>听光哥讲完怎么用Hexo搭建博客之后就立马捣鼓了起来。一开始还蛮顺利的，一下子就搭建好。到了后面修改主题时，没有前端基础的弱势彻底显现出来。于是今天早上起来就把昨天弄的全删了，查了很多教程，现在重新来一遍！<br><a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li>安装Node.js，我下载的是Node.js的4.4.7版本。<br><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Node.js下载链接</a></li>
<li>安装Git，我下载的是Git的2.9.0版本。<br><a href="http://git-scm.com/" target="_blank" rel="external">Git下载链接</a></li>
</ol>
<h1 id="安装和配置Hexo"><a href="#安装和配置Hexo" class="headerlink" title="安装和配置Hexo"></a>安装和配置Hexo</h1><ol>
<li>安装Hexo<br>随便找个地方，右键<code>Git Bush Here</code>，输入下面的指令：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g</div></pre></td></tr></table></figure>
</li>
</ol>
<p>ps. 翻墙的话速度会快很多。</p>
<ol>
<li>初始化博客<br>新建一个文件夹，用来保存网站，例如我新建的文件夹是<code>E:\HEXO</code>，然后在该目录下右键<code>Git Bush Here</code>，输入下面的指令：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行完毕之后会在该目录下生成一些配置文件和模板文件。</p>
<ol>
<li>生成博客<br>继续执行：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后会生成一个public文件夹，里面存放的就是博客静态文件。</p>
<h1 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h1><p>在<code>E:\HEXO</code>目录下执行：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>如果看到以下输出，说明本地部署成功。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http:<span class="comment">//localhost:4000/. Press Ctrl+C to stop.</span></div></pre></td></tr></table></figure></p>
<p>然后打开浏览器访问<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000</a>，就可以预览到我们的博客。</p>
<h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><p>只有部署到Github(或者其他代码托管网站)，我们的博客才能被其他人访问。</p>
<ol>
<li>注册Github账号，<a href="https://github.com/" target="_blank" rel="external">Github注册</a></li>
<li>新建一个repository，这里要注意repository命名格式必须是下面这样的：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username.github.io</div></pre></td></tr></table></figure>
</li>
</ol>
<p>例如我的就是<code>ChenJunhan.github.io</code></p>
<ol>
<li>配置<code>_config.yml</code>文件<br>在<code>E:\HEXO</code>下找到<code>_config.yml</code>文件，打开编辑，在最后面找到下面这段代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure>
</li>
</ol>
<p>替换成下面的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: http:<span class="comment">//hexo.io/docs/deployment.html</span></div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: https:<span class="comment">//github.com/用户名/用户名.github.io.git</span></div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p><strong>这里要注意repository、branch字段前加两个空格，冒号后面一个空格</strong></p>
<ol>
<li><p>在开始部署之前，要先将相应的依赖文件先装好，所以先执行：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>正式部署<br>这个步骤很简单，只需要两个命令</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行完毕之后本地文件就被upload到Github上了，接下来使用<code>http://用户名.github.io</code>就可以访问我们的博客。</p>
<h1 id="写新博文"><a href="#写新博文" class="headerlink" title="写新博文"></a>写新博文</h1><p>执行以下命令会在E:\source_post下生成一个<code>new_blog_name.md</code>文件。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"new_blog_name"</span></div></pre></td></tr></table></figure></p>
<p>这个文件就是我们的博文，可以使用<code>MarkDown</code>进行编辑，直接txt编辑也可以。其中开头几段是这篇博文的具体信息，例如本文：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hexo搭建博客(一) 使用Hexo搭建博客并托管到Github</div><div class="line">date: <span class="number">2016</span><span class="number">-07</span><span class="number">-10</span> <span class="number">15</span>:<span class="number">27</span>:<span class="number">07</span></div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>写完博文记得要执行以下命令：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在<code>E:\HEXO</code>目录下的<code>_config.yml</code>文件可以配置博客的一些基础属性，例如博客标题、作者、语言、博客主题等。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: </div><div class="line">subtitle: </div><div class="line">description:</div><div class="line">author: </div><div class="line">language:</div></pre></td></tr></table></figure></p>
<p>Hexo配置博客前期还是挺简单的，通过上面的几个步骤，博客就搭建好了，不过界面有点low。网上有很多教程教怎么修改主题的。有兴趣可以<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">点击这里</a>。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=2080139&auto=1&height=66"></iframe>

]]></content>
    </entry>
    
  
  
</search>
